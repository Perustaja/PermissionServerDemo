{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Dev\\\\CoreMultiTenancy\\\\src\\\\CoreMultiTenancy.Client\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { UserManager } from 'oidc-client';\nimport { BehaviorSubject, concat, from } from 'rxjs';\nimport { filter, map, mergeMap, take, tap } from 'rxjs/operators';\nimport { ApplicationPaths, ApplicationName } from './api-authorization.constants';\nimport * as i0 from \"@angular/core\";\nexport var AuthenticationResultStatus;\n\n(function (AuthenticationResultStatus) {\n  AuthenticationResultStatus[AuthenticationResultStatus[\"Success\"] = 0] = \"Success\";\n  AuthenticationResultStatus[AuthenticationResultStatus[\"Redirect\"] = 1] = \"Redirect\";\n  AuthenticationResultStatus[AuthenticationResultStatus[\"Fail\"] = 2] = \"Fail\";\n})(AuthenticationResultStatus || (AuthenticationResultStatus = {}));\n\nexport class AuthorizeService {\n  constructor() {\n    // By default pop ups are disabled because they don't work properly on Edge.\n    // If you want to enable pop up authentication simply set this flag to false.\n    this.popUpDisabled = true;\n    this.userSubject = new BehaviorSubject(null);\n  }\n\n  isAuthenticated() {\n    return this.getUser().pipe(map(u => !!u));\n  }\n\n  getUser() {\n    return concat(this.userSubject.pipe(take(1), filter(u => !!u)), this.getUserFromStorage().pipe(filter(u => !!u), tap(u => this.userSubject.next(u))), this.userSubject.asObservable());\n  }\n\n  getAccessToken() {\n    return from(this.ensureUserManagerInitialized()).pipe(mergeMap(() => from(this.userManager.getUser())), map(user => user && user.access_token));\n  } // We try to authenticate the user in three different ways:\n  // 1) We try to see if we can authenticate the user silently. This happens\n  //    when the user is already logged in on the IdP and is done using a hidden iframe\n  //    on the client.\n  // 2) We try to authenticate the user using a PopUp Window. This might fail if there is a\n  //    Pop-Up blocker or the user has disabled PopUps.\n  // 3) If the two methods above fail, we redirect the browser to the IdP to perform a traditional\n  //    redirect flow.\n\n\n  signIn(state) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.ensureUserManagerInitialized();\n      let user = null;\n\n      try {\n        user = yield _this.userManager.signinSilent(_this.createArguments());\n\n        _this.userSubject.next(user.profile);\n\n        return _this.success(state);\n      } catch (silentError) {\n        // User might not be authenticated, fallback to popup authentication\n        console.log('Silent authentication error: ', silentError);\n\n        try {\n          if (_this.popUpDisabled) {\n            throw new Error('Popup disabled. Change \\'authorize.service.ts:AuthorizeService.popupDisabled\\' to false to enable it.');\n          }\n\n          user = yield _this.userManager.signinPopup(_this.createArguments());\n\n          _this.userSubject.next(user.profile);\n\n          return _this.success(state);\n        } catch (popupError) {\n          if (popupError.message === 'Popup window closed') {\n            // The user explicitly cancelled the login action by closing an opened popup.\n            return _this.error('The user closed the window.');\n          } else if (!_this.popUpDisabled) {\n            console.log('Popup authentication error: ', popupError);\n          } // PopUps might be blocked by the user, fallback to redirect\n\n\n          try {\n            yield _this.userManager.signinRedirect(_this.createArguments(state));\n            return _this.redirect();\n          } catch (redirectError) {\n            console.log('Redirect authentication error: ', redirectError);\n            return _this.error(redirectError);\n          }\n        }\n      }\n    })();\n  }\n\n  completeSignIn(url) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this2.ensureUserManagerInitialized();\n        const user = yield _this2.userManager.signinCallback(url);\n\n        _this2.userSubject.next(user && user.profile);\n\n        return _this2.success(user && user.state);\n      } catch (error) {\n        console.log('There was an error signing in: ', error);\n        return _this2.error('There was an error signing in.');\n      }\n    })();\n  }\n\n  signOut(state) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        if (_this3.popUpDisabled) {\n          throw new Error('Popup disabled. Change \\'authorize.service.ts:AuthorizeService.popupDisabled\\' to false to enable it.');\n        }\n\n        yield _this3.ensureUserManagerInitialized();\n        yield _this3.userManager.signoutPopup(_this3.createArguments());\n\n        _this3.userSubject.next(null);\n\n        return _this3.success(state);\n      } catch (popupSignOutError) {\n        console.log('Popup signout error: ', popupSignOutError);\n\n        try {\n          yield _this3.userManager.signoutRedirect(_this3.createArguments(state));\n          return _this3.redirect();\n        } catch (redirectSignOutError) {\n          console.log('Redirect signout error: ', redirectSignOutError);\n          return _this3.error(redirectSignOutError);\n        }\n      }\n    })();\n  }\n\n  completeSignOut(url) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this4.ensureUserManagerInitialized();\n\n      try {\n        const response = yield _this4.userManager.signoutCallback(url);\n\n        _this4.userSubject.next(null);\n\n        return _this4.success(response && response.state);\n      } catch (error) {\n        console.log(`There was an error trying to log out '${error}'.`);\n        return _this4.error(error);\n      }\n    })();\n  }\n\n  createArguments(state) {\n    return {\n      useReplaceToNavigate: true,\n      data: state\n    };\n  }\n\n  error(message) {\n    return {\n      status: AuthenticationResultStatus.Fail,\n      message\n    };\n  }\n\n  success(state) {\n    return {\n      status: AuthenticationResultStatus.Success,\n      state\n    };\n  }\n\n  redirect() {\n    return {\n      status: AuthenticationResultStatus.Redirect\n    };\n  }\n\n  ensureUserManagerInitialized() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this5.userManager !== undefined) {\n        return;\n      }\n\n      const response = yield fetch(ApplicationPaths.ApiAuthorizationClientConfigurationUrl);\n\n      if (!response.ok) {\n        throw new Error(`Could not load settings for '${ApplicationName}'`);\n      }\n\n      const settings = {\n        authority: \"https://localhost:5100\",\n        client_id: \"testclient\",\n        redirect_uri: \"https://localhost:44459/signin-oidc\",\n        post_logout_redirect_uri: \"https://localhost:44459/signout-callback-oidc\",\n        response_type: \"id_token\",\n        scope: \"openid profile testapi\",\n        filterProtocolClaims: true,\n        loadUserInfo: true,\n        automaticSilentRenew: true,\n        includeIdTokenInSilentRenew: true\n      };\n      _this5.userManager = new UserManager(settings);\n\n      _this5.userManager.events.addUserSignedOut( /*#__PURE__*/_asyncToGenerator(function* () {\n        yield _this5.userManager.removeUser();\n\n        _this5.userSubject.next(null);\n      }));\n    })();\n  }\n\n  getUserFromStorage() {\n    return from(this.ensureUserManagerInitialized()).pipe(mergeMap(() => this.userManager.getUser()), map(u => u && u.profile));\n  }\n\n}\n\nAuthorizeService.ɵfac = function AuthorizeService_Factory(t) {\n  return new (t || AuthorizeService)();\n};\n\nAuthorizeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthorizeService,\n  factory: AuthorizeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Dev/CoreMultiTenancy/src/CoreMultiTenancy.Client/ClientApp/src/api-authorization/authorize.service.ts"],"names":["UserManager","BehaviorSubject","concat","from","filter","map","mergeMap","take","tap","ApplicationPaths","ApplicationName","i0","AuthenticationResultStatus","AuthorizeService","constructor","popUpDisabled","userSubject","isAuthenticated","getUser","pipe","u","getUserFromStorage","next","asObservable","getAccessToken","ensureUserManagerInitialized","userManager","user","access_token","signIn","state","signinSilent","createArguments","profile","success","silentError","console","log","Error","signinPopup","popupError","message","error","signinRedirect","redirect","redirectError","completeSignIn","url","signinCallback","signOut","signoutPopup","popupSignOutError","signoutRedirect","redirectSignOutError","completeSignOut","response","signoutCallback","useReplaceToNavigate","data","status","Fail","Success","Redirect","undefined","fetch","ApiAuthorizationClientConfigurationUrl","ok","settings","authority","client_id","redirect_uri","post_logout_redirect_uri","response_type","scope","filterProtocolClaims","loadUserInfo","automaticSilentRenew","includeIdTokenInSilentRenew","events","addUserSignedOut","removeUser","ɵfac","AuthorizeService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { UserManager } from 'oidc-client';\r\nimport { BehaviorSubject, concat, from } from 'rxjs';\r\nimport { filter, map, mergeMap, take, tap } from 'rxjs/operators';\r\nimport { ApplicationPaths, ApplicationName } from './api-authorization.constants';\r\nimport * as i0 from \"@angular/core\";\r\nexport var AuthenticationResultStatus;\r\n(function (AuthenticationResultStatus) {\r\n    AuthenticationResultStatus[AuthenticationResultStatus[\"Success\"] = 0] = \"Success\";\r\n    AuthenticationResultStatus[AuthenticationResultStatus[\"Redirect\"] = 1] = \"Redirect\";\r\n    AuthenticationResultStatus[AuthenticationResultStatus[\"Fail\"] = 2] = \"Fail\";\r\n})(AuthenticationResultStatus || (AuthenticationResultStatus = {}));\r\nexport class AuthorizeService {\r\n    constructor() {\r\n        // By default pop ups are disabled because they don't work properly on Edge.\r\n        // If you want to enable pop up authentication simply set this flag to false.\r\n        this.popUpDisabled = true;\r\n        this.userSubject = new BehaviorSubject(null);\r\n    }\r\n    isAuthenticated() {\r\n        return this.getUser().pipe(map(u => !!u));\r\n    }\r\n    getUser() {\r\n        return concat(this.userSubject.pipe(take(1), filter(u => !!u)), this.getUserFromStorage().pipe(filter(u => !!u), tap(u => this.userSubject.next(u))), this.userSubject.asObservable());\r\n    }\r\n    getAccessToken() {\r\n        return from(this.ensureUserManagerInitialized())\r\n            .pipe(mergeMap(() => from(this.userManager.getUser())), map(user => user && user.access_token));\r\n    }\r\n    // We try to authenticate the user in three different ways:\r\n    // 1) We try to see if we can authenticate the user silently. This happens\r\n    //    when the user is already logged in on the IdP and is done using a hidden iframe\r\n    //    on the client.\r\n    // 2) We try to authenticate the user using a PopUp Window. This might fail if there is a\r\n    //    Pop-Up blocker or the user has disabled PopUps.\r\n    // 3) If the two methods above fail, we redirect the browser to the IdP to perform a traditional\r\n    //    redirect flow.\r\n    async signIn(state) {\r\n        await this.ensureUserManagerInitialized();\r\n        let user = null;\r\n        try {\r\n            user = await this.userManager.signinSilent(this.createArguments());\r\n            this.userSubject.next(user.profile);\r\n            return this.success(state);\r\n        }\r\n        catch (silentError) {\r\n            // User might not be authenticated, fallback to popup authentication\r\n            console.log('Silent authentication error: ', silentError);\r\n            try {\r\n                if (this.popUpDisabled) {\r\n                    throw new Error('Popup disabled. Change \\'authorize.service.ts:AuthorizeService.popupDisabled\\' to false to enable it.');\r\n                }\r\n                user = await this.userManager.signinPopup(this.createArguments());\r\n                this.userSubject.next(user.profile);\r\n                return this.success(state);\r\n            }\r\n            catch (popupError) {\r\n                if (popupError.message === 'Popup window closed') {\r\n                    // The user explicitly cancelled the login action by closing an opened popup.\r\n                    return this.error('The user closed the window.');\r\n                }\r\n                else if (!this.popUpDisabled) {\r\n                    console.log('Popup authentication error: ', popupError);\r\n                }\r\n                // PopUps might be blocked by the user, fallback to redirect\r\n                try {\r\n                    await this.userManager.signinRedirect(this.createArguments(state));\r\n                    return this.redirect();\r\n                }\r\n                catch (redirectError) {\r\n                    console.log('Redirect authentication error: ', redirectError);\r\n                    return this.error(redirectError);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    async completeSignIn(url) {\r\n        try {\r\n            await this.ensureUserManagerInitialized();\r\n            const user = await this.userManager.signinCallback(url);\r\n            this.userSubject.next(user && user.profile);\r\n            return this.success(user && user.state);\r\n        }\r\n        catch (error) {\r\n            console.log('There was an error signing in: ', error);\r\n            return this.error('There was an error signing in.');\r\n        }\r\n    }\r\n    async signOut(state) {\r\n        try {\r\n            if (this.popUpDisabled) {\r\n                throw new Error('Popup disabled. Change \\'authorize.service.ts:AuthorizeService.popupDisabled\\' to false to enable it.');\r\n            }\r\n            await this.ensureUserManagerInitialized();\r\n            await this.userManager.signoutPopup(this.createArguments());\r\n            this.userSubject.next(null);\r\n            return this.success(state);\r\n        }\r\n        catch (popupSignOutError) {\r\n            console.log('Popup signout error: ', popupSignOutError);\r\n            try {\r\n                await this.userManager.signoutRedirect(this.createArguments(state));\r\n                return this.redirect();\r\n            }\r\n            catch (redirectSignOutError) {\r\n                console.log('Redirect signout error: ', redirectSignOutError);\r\n                return this.error(redirectSignOutError);\r\n            }\r\n        }\r\n    }\r\n    async completeSignOut(url) {\r\n        await this.ensureUserManagerInitialized();\r\n        try {\r\n            const response = await this.userManager.signoutCallback(url);\r\n            this.userSubject.next(null);\r\n            return this.success(response && response.state);\r\n        }\r\n        catch (error) {\r\n            console.log(`There was an error trying to log out '${error}'.`);\r\n            return this.error(error);\r\n        }\r\n    }\r\n    createArguments(state) {\r\n        return { useReplaceToNavigate: true, data: state };\r\n    }\r\n    error(message) {\r\n        return { status: AuthenticationResultStatus.Fail, message };\r\n    }\r\n    success(state) {\r\n        return { status: AuthenticationResultStatus.Success, state };\r\n    }\r\n    redirect() {\r\n        return { status: AuthenticationResultStatus.Redirect };\r\n    }\r\n    async ensureUserManagerInitialized() {\r\n        if (this.userManager !== undefined) {\r\n            return;\r\n        }\r\n        const response = await fetch(ApplicationPaths.ApiAuthorizationClientConfigurationUrl);\r\n        if (!response.ok) {\r\n            throw new Error(`Could not load settings for '${ApplicationName}'`);\r\n        }\r\n        const settings = {\r\n            authority: \"https://localhost:5100\",\r\n            client_id: \"testclient\",\r\n            redirect_uri: \"https://localhost:44459/signin-oidc\",\r\n            post_logout_redirect_uri: \"https://localhost:44459/signout-callback-oidc\",\r\n            response_type: \"id_token\",\r\n            scope: \"openid profile testapi\",\r\n            filterProtocolClaims: true,\r\n            loadUserInfo: true,\r\n            automaticSilentRenew: true,\r\n            includeIdTokenInSilentRenew: true\r\n        };\r\n        this.userManager = new UserManager(settings);\r\n        this.userManager.events.addUserSignedOut(async () => {\r\n            await this.userManager.removeUser();\r\n            this.userSubject.next(null);\r\n        });\r\n    }\r\n    getUserFromStorage() {\r\n        return from(this.ensureUserManagerInitialized())\r\n            .pipe(mergeMap(() => this.userManager.getUser()), map(u => u && u.profile));\r\n    }\r\n}\r\nAuthorizeService.ɵfac = function AuthorizeService_Factory(t) { return new (t || AuthorizeService)(); };\r\nAuthorizeService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthorizeService, factory: AuthorizeService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}
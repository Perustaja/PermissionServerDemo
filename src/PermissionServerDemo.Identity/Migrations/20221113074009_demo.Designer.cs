// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PermissionServerDemo.Identity.Data;

#nullable disable

namespace PermissionServerDemo.Identity.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221113074009_demo")]
    partial class demo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PermissionServerDemo.Identity.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogoUri")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresConfirmationForNewUsers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("PermissionServerDemo.Identity.Entities.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PermCategoryId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PermCategoryId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = "AircraftCreate",
                            Description = "Users with this permission can create new aircraft within the tenant.",
                            IsObsolete = false,
                            Name = "Create Aircraft",
                            PermCategoryId = "Aircraft"
                        },
                        new
                        {
                            Id = "AircraftEdit",
                            Description = "Users with this permission can edit aircraft within the tenant.",
                            IsObsolete = false,
                            Name = "Edit Aircraft",
                            PermCategoryId = "Aircraft"
                        },
                        new
                        {
                            Id = "AircraftDelete",
                            Description = "Users with this permission can delete aircraft within the tenant.",
                            IsObsolete = false,
                            Name = "Delete Aircraft",
                            PermCategoryId = "Aircraft"
                        },
                        new
                        {
                            Id = "RolesCreate",
                            Description = "Users with this permission can create roles within the tenant.",
                            IsObsolete = false,
                            Name = "Create Roles",
                            PermCategoryId = "Roles"
                        },
                        new
                        {
                            Id = "RolesEdit",
                            Description = "Users with this permission can edit roles within the tenant.",
                            IsObsolete = false,
                            Name = "Edit Roles",
                            PermCategoryId = "Roles"
                        },
                        new
                        {
                            Id = "RolesDelete",
                            Description = "Users with this permission can delete roles within the tenant.",
                            IsObsolete = false,
                            Name = "Delete Roles",
                            PermCategoryId = "Roles"
                        },
                        new
                        {
                            Id = "UsersManageRoles",
                            Description = "Users with this permission can add or remove users' roles within the tenant.",
                            IsObsolete = false,
                            Name = "Manage Users' Roles",
                            PermCategoryId = "Users"
                        },
                        new
                        {
                            Id = "UsersManageAccess",
                            Description = "Users with this permission can revoke access for users within the tenant.",
                            IsObsolete = false,
                            Name = "Manage Users' Access",
                            PermCategoryId = "Users"
                        });
                });

            modelBuilder.Entity("PermissionServerDemo.Identity.Entities.PermissionCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PermissionCategories");

                    b.HasData(
                        new
                        {
                            Id = "Aircraft",
                            IsObsolete = false,
                            Name = "Aircraft"
                        },
                        new
                        {
                            Id = "Roles",
                            IsObsolete = false,
                            Name = "Roles"
                        },
                        new
                        {
                            Id = "Users",
                            IsObsolete = false,
                            Name = "Users"
                        });
                });

            modelBuilder.Entity("PermissionServerDemo.Identity.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGlobalAdminDefault")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGlobalDefaultForNewUsers")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTenantDefaultForNewUsers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OrgId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.HasIndex("OrgId");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("78a7570f-3ce5-48ba-9461-80283ed1d94d"),
                            ConcurrencyStamp = "00a2774c-38d6-4445-a326-71d7d9f1742a",
                            Description = "Default admin role for new tenant owners",
                            IsGlobal = true,
                            IsGlobalAdminDefault = true,
                            IsGlobalDefaultForNewUsers = false,
                            IsTenantDefaultForNewUsers = false,
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = new Guid("77a7570f-3ce5-48ba-9461-80283ed1d94d"),
                            ConcurrencyStamp = "c493f61e-c8ec-48b8-a5c2-7dc5d30ac1d0",
                            Description = "Default user role with minimal permissions",
                            IsGlobal = true,
                            IsGlobalAdminDefault = false,
                            IsGlobalDefaultForNewUsers = true,
                            IsTenantDefaultForNewUsers = false,
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("75a7570f-3ce5-48ba-9461-80283ed1d94d"),
                            ConcurrencyStamp = "36ea601c-b941-488d-8e2f-9057477d2e2f",
                            Description = "Role for creating new aircraft",
                            IsGlobal = true,
                            IsGlobalAdminDefault = false,
                            IsGlobalDefaultForNewUsers = false,
                            IsTenantDefaultForNewUsers = false,
                            Name = "Create Aircraft",
                            NormalizedName = "CREATE AIRCRAFT"
                        });
                });

            modelBuilder.Entity("PermissionServerDemo.Identity.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PermissionId")
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("78a7570f-3ce5-48ba-9461-80283ed1d94d"),
                            PermissionId = "AircraftEdit"
                        },
                        new
                        {
                            RoleId = new Guid("78a7570f-3ce5-48ba-9461-80283ed1d94d"),
                            PermissionId = "AircraftDelete"
                        },
                        new
                        {
                            RoleId = new Guid("78a7570f-3ce5-48ba-9461-80283ed1d94d"),
                            PermissionId = "RolesCreate"
                        },
                        new
                        {
                            RoleId = new Guid("78a7570f-3ce5-48ba-9461-80283ed1d94d"),
                            PermissionId = "RolesEdit"
                        },
                        new
                        {
                            RoleId = new Guid("78a7570f-3ce5-48ba-9461-80283ed1d94d"),
                            PermissionId = "RolesDelete"
                        },
                        new
                        {
                            RoleId = new Guid("78a7570f-3ce5-48ba-9461-80283ed1d94d"),
                            PermissionId = "UsersManageRoles"
                        },
                        new
                        {
                            RoleId = new Guid("78a7570f-3ce5-48ba-9461-80283ed1d94d"),
                            PermissionId = "UsersManageAccess"
                        },
                        new
                        {
                            RoleId = new Guid("75a7570f-3ce5-48ba-9461-80283ed1d94d"),
                            PermissionId = "AircraftCreate"
                        });
                });

            modelBuilder.Entity("PermissionServerDemo.Identity.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("77a6570f-3ce5-48ba-9461-80283ed1d94d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3c2f5a5-6919-4979-b4be-1b1ff4870ce0",
                            Email = "shadow@mydomain.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SHADOW@MYDOMAIN.COM",
                            NormalizedUserName = "SHADOW@MYDOMAIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMKU/Qm1FVFlfCu4MTdwqYFVShqiAoIOuAjGogmAcbqP3YNMNER2C9mhOKsyC/o9jw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "shadow@mydomain.com"
                        });
                });

            modelBuilder.Entity("PermissionServerDemo.Identity.Entities.UserOrganization", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AwaitingApproval")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Blacklisted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateBlacklisted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("TEXT");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "OrgId");

                    b.HasIndex("OrgId");

                    b.ToTable("UserOrganizations");
                });

            modelBuilder.Entity("PermissionServerDemo.Identity.UserOrganizationRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "OrgId", "RoleId");

                    b.HasIndex("OrgId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserOrganizationRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("PermissionServerDemo.Identity.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PermissionServerDemo.Identity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PermissionServerDemo.Identity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("PermissionServerDemo.Identity.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PermissionServerDemo.Identity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PermissionServerDemo.Identity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionServerDemo.Identity.Entities.Permission", b =>
                {
                    b.HasOne("PermissionServerDemo.Identity.Entities.PermissionCategory", "PermCategory")
                        .WithMany("Permissions")
                        .HasForeignKey("PermCategoryId");

                    b.Navigation("PermCategory");
                });

            modelBuilder.Entity("PermissionServerDemo.Identity.Entities.Role", b =>
                {
                    b.HasOne("PermissionServerDemo.Identity.Entities.Organization", "Organization")
                        .WithMany("Roles")
                        .HasForeignKey("OrgId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("PermissionServerDemo.Identity.Entities.RolePermission", b =>
                {
                    b.HasOne("PermissionServerDemo.Identity.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PermissionServerDemo.Identity.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PermissionServerDemo.Identity.Entities.UserOrganization", b =>
                {
                    b.HasOne("PermissionServerDemo.Identity.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PermissionServerDemo.Identity.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PermissionServerDemo.Identity.UserOrganizationRole", b =>
                {
                    b.HasOne("PermissionServerDemo.Identity.Entities.Organization", "Organization")
                        .WithMany("UserOrganizationRoles")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PermissionServerDemo.Identity.Entities.Role", "Role")
                        .WithMany("UserOrganizationRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PermissionServerDemo.Identity.Entities.User", "User")
                        .WithMany("UserOrganizationRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PermissionServerDemo.Identity.Entities.Organization", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("UserOrganizationRoles");

                    b.Navigation("UserOrganizations");
                });

            modelBuilder.Entity("PermissionServerDemo.Identity.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("PermissionServerDemo.Identity.Entities.PermissionCategory", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("PermissionServerDemo.Identity.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserOrganizationRoles");
                });

            modelBuilder.Entity("PermissionServerDemo.Identity.Entities.User", b =>
                {
                    b.Navigation("UserOrganizationRoles");

                    b.Navigation("UserOrganizations");
                });
#pragma warning restore 612, 618
        }
    }
}
